apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: "io.spring.dependency-management"

// 编译脚本
buildscript {
    ext {
        springBootVersion = '3.1.5'
    }

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public/" }
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

group = 'cn.cuilan.boot'
version = 'spring-3.1.x'
description = ""

// 指定编译器版本
sourceCompatibility = JavaVersion.VERSION_1_8
// 指定目标版本
targetCompatibility = JavaVersion.VERSION_1_8

// 任务设置字符编码
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// 设置仓库
repositories {
    mavenLocal()
    maven { url "https://maven.aliyun.com/repository/public" }
    mavenCentral()
}

// 依赖管理
dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
}

dependencies {
    // spring boot
    compileOnly("org.springframework.boot:spring-boot-autoconfigure")
    compileOnly("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    // tools
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3' // or 'io.jsonwebtoken:jjwt-gson:0.12.3' for gson

    // lombok
    compileOnly("org.projectlombok:lombok:1.18.28")
    annotationProcessor("org.projectlombok:lombok:1.18.28")

    // test
    testCompileOnly("org.springframework.boot:spring-boot-starter-test")
    testCompileOnly("org.projectlombok:lombok:1.18.28")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.28")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = project.name
            version = project.version
        }
    }
    repositories {
        mavenLocal()
    }
}

//println(project.group)
//println(project.name)
//println(project.version)
//println(java.sourceCompatibility)
//println(java.targetCompatibility)